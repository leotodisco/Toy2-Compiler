import java_cup.runtime.*;
import unisa.compilatori.nodes.expr.*;
import unisa.compilatori.nodes.stat.*;
import unisa.compilatori.nodes.*;
import unisa.compilatori.Token;
import java.util.ArrayList;

terminal OTHERWISE,LBRACK, RBRACK, LET, GO, DOT, WHEN, LOOP, REF, ENDVAR, UMINUS, VAR, COLON, ASSIGN, SEMI, ID, COMMA, REAL_CONST, INTEGER_CONST, STRING_CONST, TRUE, FALSE, REAL, INTEGER, STRING, BOOLEAN, RETURN, FUNCTION, TYPERETURN, ENDFUNCTION, LPAR, RPAR, PROCEDURE, ENDPROCEDURE, OUT, WRITE, WRITERETURN, DOLLARSIGN, READ, IF, THEN, ELSE, ENDIF, ELIF, WHILE, DO, ENDWHILE, PLUS, MINUS, TIMES, DIV, EQ, NE, LT, LE, GT, GE, AND, OR, NOT;
nonterminal Stats, Let, FunCall, ProcExprs, ProcCall, IOArgsExpr, IterWithoutProcedure, Program, Iter, VarDecl, Decls, Ids, Consts, Type, Function, FuncParams, OtherFuncParams, Types, Procedure, ProcParams, OtherProcParams, ProcParamId, Body, Stat, IfStat, Elifs, Else, WhileStat, Elif, Exprs, IOArgs;
nonterminal ConstOP Const;
nonterminal UnaryOP Unary;
nonterminal ExprOP Expr;

/* Precedenze */
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;

Program ::= IterWithoutProcedure:iterNoProc Procedure:proc Iter:it {: RESULT = new ProgramOp((Procedure) proc, (IterOp) iterNoProc, (IterOp)it);
:};

IterWithoutProcedure ::= VarDecl:attr IterWithoutProcedure:it {:IterOp iter = (IterOp)it;
                                                               iter.addDecl((VarDecl)attr);
                                                               RESULT = iter;:}
      | Function:attr IterWithoutProcedure:it {:
    IterOp iter = (IterOp)it;
                                   iter.addFunction((Function)attr);
                                   RESULT = iter;
      :}
      | /* empty */ {:RESULT = new IterOp(); :};

Iter ::= VarDecl:declaration Iter:it {:
                                       IterOp iter = (IterOp)it;
                                       iter.addDecl((VarDecl)declaration);
                                       RESULT = iter;
                                       :}
      | Function:function Iter:it {:
                                     IterOp iter = (IterOp)it;

                                     iter.addFunction((Function)function);
                                     RESULT = iter;
                                     :}
      | Procedure:procedure Iter:it {:

                                     IterOp iter = (IterOp)it;
                                     iter.addProcedure((Procedure) procedure);
                                     RESULT = iter;
                                     :}
      | /* empty */ {:RESULT = new IterOp(); :};

VarDecl ::= VAR Decls:decls {:RESULT = new VarDecl( (ArrayList<Decl>) decls);:} ;

Decls ::= Ids:ids COLON Type:tipo SEMI Decls:decls {:ArrayList<Decl> temp = (ArrayList<Decl>) decls;
                                                     //Type type = new Type(tipo);
                                                     Decl decl = new Decl((ArrayList<Identifier>) ids, (Type) tipo, Decl.TipoDecl.TYPE);
                                                     temp.add(decl);
                                                     RESULT = temp;

                                                    :}
	| Ids:ids ASSIGN Consts:consts SEMI Decls:decls {:ArrayList<Decl> temp = (ArrayList<Decl>) decls;
	                                                  Decl decl = new Decl((ArrayList<ConstOP>) consts, (ArrayList<Identifier>) ids, null, Decl.TipoDecl.ASSIGN);
                                                      temp.add(decl);
                                                      RESULT = temp;
	                                                 :}
	| Ids:ids COLON Type:tipo SEMI ENDVAR {:
	                                        //Type type = new Type(tipo);
	                                        Decl decl = new Decl((ArrayList<Identifier>) ids, (Type) tipo, Decl.TipoDecl.TYPE);
	                                        ArrayList<Decl> decls = new ArrayList<>();
                                            decls.add(decl);
                                            RESULT = decls;
                                           :}
	| Ids:ids ASSIGN Consts:consts SEMI ENDVAR {:   ArrayList<Decl> decls = new ArrayList<>();
                                                    Decl decl = new Decl((ArrayList<ConstOP>) consts, (ArrayList<Identifier>) ids, null, Decl.TipoDecl.ASSIGN);
                                                    decls.add(decl);
                                                    RESULT = decls; :};

Ids ::= ID:id COMMA Ids:ids {: ArrayList<Identifier> temp = (ArrayList<Identifier>) ids; temp.add( new Identifier(id, Identifier.Mode.VARIABLENAME)); RESULT = temp; :}
        | ID:id {:ArrayList<Identifier> ids = new ArrayList<>(); ids.add( new Identifier( id, Identifier.Mode.VARIABLENAME )); RESULT = ids;:};

Consts ::= Const:costante COMMA Consts:listaCostanti {: ArrayList<ConstOP> temp = (ArrayList<ConstOP>) listaCostanti; temp.add( (ConstOP) costante); RESULT = temp;:}
	| Const:costante {:ArrayList<ConstOP> consts = new ArrayList<ConstOP>(); consts.add ( (ConstOP)costante); RESULT = consts;:};

/**NB: Aggiunti MINUS REAL_CONST che ci permettono di gestire anche UMINUS per le costanti*/
Const ::= REAL_CONST:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.REAL); :}
	| INTEGER_CONST:lessema {:RESULT =new ConstOP(lessema, ConstOP.Kind.INTEGER); :}
	| STRING_CONST:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.STRING);:}
	| TRUE:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.BOOLEAN); :}
	| FALSE:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.BOOLEAN);:};

Type ::= REAL:lessema {:RESULT = new Type(lessema); :}
	| INTEGER:lessema {:RESULT = new Type(lessema); :}
	| STRING:lessema {:RESULT = new Type(lessema); :}
	| BOOLEAN:lessema {:RESULT = new Type(lessema); :};

Function  ::= FUNCTION ID:functionId LPAR FuncParams:paramsList RPAR TYPERETURN Types:typesList COLON Body:body ENDFUNCTION {:
                                                                            Identifier functionIdentifier = new Identifier(functionId, Identifier.Mode.FUNCTIONIDENTIFIER);
                                                                            ArrayList<CallableParam> params = (ArrayList<CallableParam>) paramsList;
                                                                            ArrayList<Type> tipi = (ArrayList<Type>) typesList;

                                                                            Function fun = new Function(functionIdentifier, tipi, params, (Body)body);
                                                                            RESULT = fun;

:};

FuncParams ::= ID:id COLON Type:tipo OtherFuncParams:paramsList {:
                                                                ArrayList<CallableParam> temp = (ArrayList<CallableParam>) paramsList;
                                                                Identifier identifier = new Identifier(id, Identifier.Mode.PARAMS);
                                                                CallableParam fp = new CallableParam(identifier, (Type) tipo);
                                                                temp.add(fp);
                                                                RESULT = temp;
                                                                :}
	    | /* empty */ {:
                        ArrayList<CallableParam> temp = new ArrayList<>();
                        RESULT = temp;
                        :};

OtherFuncParams ::= COMMA ID:id COLON Type:tipo OtherFuncParams:paramsList {:
                                                                ArrayList<CallableParam> temp = (ArrayList<CallableParam>) paramsList;
                                                                Identifier identifier = new Identifier(id, Identifier.Mode.PARAMS);
                                                                CallableParam fp = new CallableParam(identifier, (Type) tipo);
                                                                temp.add(fp);
                                                                RESULT = temp;
                                                                :}
	    | /* empty */ {:
	                    ArrayList<CallableParam> temp = new ArrayList<>();
	                    RESULT = temp;
	                    :};

Types ::= Type:type COMMA Types:typeList {:
                                            ArrayList<Type> temp = (ArrayList<Type>) typeList;
                                            temp.add((Type) type);
                                            RESULT = temp;
                                            :}
	    | Type:type {:
                             ArrayList<Type> types = new ArrayList<>();
                	         types.add((Type) type);
                	         RESULT = types;
                	 :};

Procedure ::= PROCEDURE ID:id LPAR ProcParams:procparams RPAR COLON Body:body ENDPROCEDURE {:if(procparams == null)
 RESULT = new Procedure(new Identifier(id, Identifier.Mode.PROCEDUREIDENTIFIER), (Body) body);
 else  RESULT = new Procedure(new Identifier(id, Identifier.Mode.PROCEDUREIDENTIFIER), (ArrayList<CallableParam>) procparams, (Body) body); :};

ProcParams::= ProcParamId:procparamid COLON Type:tipo OtherProcParams:otherParams {:ArrayList<CallableParam> temp = (ArrayList<CallableParam>) otherParams; temp.add(new CallableParam((Identifier) procparamid, (Type) tipo)); RESULT = temp;:}
	   | /* empty */ ;

OtherProcParams ::= COMMA ProcParamId:procparamid COLON Type:tipo OtherProcParams:otherParams {:ArrayList<CallableParam> temp = (ArrayList<CallableParam>) otherParams; temp.add(new CallableParam((Identifier) procparamid, (Type) tipo)); RESULT = temp;:}
	   | /* empty */ {:RESULT = new ArrayList<CallableParam>();:};

ProcParamId ::= ID:id {:RESULT = new Identifier(id, Identifier.Mode.PARAMS);:}
	    | OUT ID:id {:RESULT = new Identifier(id, Identifier.Mode.PARAMSOUT);:};

Body ::= VarDecl:vardecl Body:body   {:Body bodytemp = (Body)body; bodytemp.addDecl((VarDecl) vardecl); RESULT = bodytemp;:}
	| Stat:stat Body:body {:Body bodytemp = (Body)body; bodytemp.addStatement((Stat) stat); RESULT = bodytemp;:}
	| /* empty */ {:Body body = new Body(new ArrayList<>(), new ArrayList<>()); RESULT = body;:};

Stat ::= Ids:ids ASSIGN Exprs:exprList SEMI {:Stat stat = new Stat(Stat.Mode.ASSIGN, (ArrayList<Identifier>) ids, (ArrayList<ExprOP>)exprList); RESULT = stat;:}
	 | ProcCall:proccall SEMI {:RESULT = proccall;:}
	 | RETURN Exprs:expList SEMI {:Stat stat = new Stat(Stat.Mode.RETURN, (ArrayList<ExprOP>)expList); RESULT=stat; :}
	 | WRITE IOArgs:ioArgs SEMI {:Stat stat = new Stat(Stat.Mode.WRITE, (ArrayList<ExprOP>)ioArgs); RESULT=stat; :}
	 | WRITERETURN IOArgs:ioArgs SEMI {:Stat stat = new Stat(Stat.Mode.WRITE_RETURN, (ArrayList<ExprOP>)ioArgs); RESULT=stat; :}
	 | READ IOArgs:ioArgs SEMI {:Stat stat = new Stat(Stat.Mode.READ, (ArrayList<ExprOP>) ioArgs); RESULT=stat; :}
	 | IfStat:IfStat SEMI {:RESULT = IfStat;:}
	 | Let:l SEMI {:RESULT = l;:}
	 | WhileStat:WhileStat SEMI {:RESULT = WhileStat;:};

Stats ::= Stat:s Stats:l
 {:var statement = (Stat) s;
 var lista = (ArrayList<Stat>) l;
 lista.add(statement);
 RESULT = lista;
 :}
 | /**/ {:RESULT = new ArrayList<Stat>();:};

Let ::= LET VarDecl:v SEMI GO DOT WHEN LPAR Expr:condizione RPAR DOT LOOP LBRACK Stats:listaStats RBRACK DOT WHEN LPAR Expr:condizione2 RPAR DOT LOOP LBRACK Stats:lista2 RBRACK DOT OTHERWISE DOT DO LBRACK Stats:statsOtherwise RBRACK

{:
var decls = (VarDecl) v;
var condizione1 = (ExprOP) condizione;
var listaStats1 = (ArrayList<Stat>) listaStats;

var condizione22 = (ExprOP) condizione2;
var listaStats2 = (ArrayList<Stat>) lista2;

var listaOtherwise = (ArrayList<Stat>) statsOtherwise;

var let = new LetStat(decls, condizione1, listaStats1, condizione22, listaStats2, listaOtherwise);
RESULT = let;

:}


;


FunCall ::= ID:id LPAR Exprs:listaEspressioni RPAR {:RESULT = new FunCall(new Identifier(id, Identifier.Mode.FUNCTIONIDENTIFIER), (ArrayList<ExprOP>)listaEspressioni);:}           /* chiamata con almeno un parametro */
         | ID:id LPAR RPAR   {:RESULT = new FunCall(new Identifier(id, Identifier.Mode.FUNCTIONIDENTIFIER)); :}               /* chiamata con nessun parametro */;

ProcCall ::= ID:id LPAR ProcExprs:listaEspressioni RPAR {:RESULT = new ProcCall(new Identifier(id, Identifier.Mode.PROCEDUREIDENTIFIER), (ArrayList<ExprOP>)listaEspressioni, Stat.Mode.PROCCALL);:}   /* chiamata con almeno un parametro */
         | ID:id LPAR RPAR {:RESULT = new ProcCall(new Identifier(id, Identifier.Mode.PROCEDUREIDENTIFIER), Stat.Mode.PROCCALL); :}  ;           /* chiamata con nessun parametro */

IfStat ::= IF Expr:expr THEN Body:body Elifs:elifs Else:elseop ENDIF {:RESULT = new IfStat((ExprOP) expr, (Body) body, (ElseOP) elseop, (ArrayList<ElseIfOP>) elifs, Stat.Mode.IF);:};

Elifs ::= Elif:elif Elifs:elifs {:ArrayList<ElseIfOP> temp = (ArrayList<ElseIfOP>) elifs; temp.add((ElseIfOP) elif); RESULT = temp;:}
      | /* empty */ {:RESULT = new ArrayList<ElseIfOP>();:};

Elif ::= ELIF Expr:expr THEN Body:body {:RESULT = new ElseIfOP((ExprOP) expr, (Body) body);:};

Else ::= ELSE Body:body {:RESULT = new ElseOP((Body) body);:}
     | /* empty */;

WhileStat ::= WHILE Expr:expr DO Body:body ENDWHILE {:RESULT = new WhileStat((ExprOP) expr, (Body) body, Stat.Mode.WHILE);:};


IOArgs ::= IOArgsExpr:ioArgsExpr IOArgs:ioArgs {:
                                                ArrayList<ExprOP> temp = (ArrayList<ExprOP>) ioArgs;
                                                temp.add((ExprOP)ioArgsExpr);
                                                RESULT = temp;
                                                :}    /* qui l'Expr corretta è concatenazione di stringhe o singola stringa*/
       |  DOLLARSIGN LPAR Expr:e1 RPAR IOArgs:ioArgs {:
                                                ArrayList<ExprOP> temp = (ArrayList<ExprOP>) ioArgs;
                                                ExprOP tempExprOP = (ExprOP) e1;
                                                tempExprOP.setMode(ExprOP.Mode.IOARGSDOLLAR);
                                                temp.add( tempExprOP );
                                                RESULT = temp;
                                                :}
       | /* empty */ {:ArrayList<ExprOP> listaIOArgs = new ArrayList<>(); RESULT = listaIOArgs;:};

IOArgsExpr ::= ID:lessema {: Identifier id = new Identifier(lessema, ExprOP.Mode.IOARGS); RESULT = id;:}
        | STRING_CONST:strConst {:
                                       ConstOP cons = new ConstOP(strConst, ConstOP.Kind.STRING, ExprOP.Mode.IOARGS) ;
                                       RESULT = cons;
                                       :}   /* Aggiunto un expr speciale per IOArgs, dato che si richiedeva soltanto la concatenazione di stringhe e null altro */
        | IOArgsExpr:e1 PLUS IOArgsExpr:e2 {:
                                            BinaryOP expr = new BinaryOP("plus_op", (ExprOP) e1, (ExprOP) e2);
                                            expr.setMode(ExprOP.Mode.IOARGS);
                                            RESULT = expr;
                                            :};

ProcExprs::= Expr:e1 COMMA ProcExprs:exprList {:ArrayList<ExprOP> temp = (ArrayList<ExprOP>) exprList;
                                                temp.add(e1);
                                                RESULT = temp;
                                               :}
	  | REF ID:id COMMA ProcExprs:exprList {:ArrayList<ExprOP> temp = (ArrayList<ExprOP>) exprList;
	                                        temp.add(new Identifier(id, Identifier.Mode.PARAMSREF));
                                          RESULT = temp;
	                                     :}
      | Expr:e1 {:ArrayList<ExprOP> exprs = new ArrayList<>();
                  exprs.add(e1);
                  RESULT = exprs;
                 :}
	  | REF ID:id {:
	  var arrayList = new ArrayList<ExprOP>();
	  arrayList.add(new Identifier(id, Identifier.Mode.PARAMSREF));
	  RESULT = arrayList;

	  :};

Exprs ::= Expr:e COMMA Exprs:exprs {:
                                        ArrayList<ExprOP> temp = (ArrayList<ExprOP>) exprs;
                                        temp.add(e);
                                        RESULT = temp;
                                    :}
	| Expr:e {:
             ArrayList<ExprOP> Exprs = new ArrayList<>();
	         Exprs.add(e);
	         RESULT = Exprs;
	         :};

Expr ::= FunCall:funcall {:RESULT = (ExprOP) funcall; :}
	| REAL_CONST:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.REAL); :}
    | INTEGER_CONST:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.INTEGER);   :}
	| STRING_CONST:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.STRING);  :}
	| ID:lessema {:RESULT = new Identifier(lessema, Identifier.Mode.VARIABLENAME);:}
    | TRUE:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.BOOLEAN);  :}
    | FALSE:lessema {:RESULT = new ConstOP(lessema, ConstOP.Kind.BOOLEAN);  :}
    | Expr:e1 PLUS Expr:e2 {:RESULT = new BinaryOP("plus_op", e1, e2); :}
	| Expr:e1 MINUS Expr:e2 {:RESULT = new BinaryOP("minus_op", e1, e2);:}
	| Expr:e1 TIMES Expr:e2 {:RESULT = new BinaryOP("times_op", e1, e2);:}
	| Expr:e1 DIV Expr:e2 {:RESULT = new BinaryOP("div_op", e1, e2);:}
	| Expr:e1 AND Expr:e2 {:RESULT = new BinaryOP("and_op", e1, e2);:}
	| Expr:e1 OR Expr:e2 {:RESULT = new BinaryOP("or_op", e1, e2);:}
	| Expr:e1 GT Expr:e2 {:RESULT = new BinaryOP("gt_op", e1, e2);:}
	| Expr:e1 GE Expr:e2 {:RESULT = new BinaryOP("ge_op", e1, e2);:}
	| Expr:e1 LT Expr:e2 {:RESULT = new BinaryOP("lt_op",e1, e2);:}
	| Expr:e1 LE Expr:e2 {:RESULT = new BinaryOP("le_op", e1, e2);:}
	| Expr:e1 EQ Expr:e2 {:RESULT = new BinaryOP("eq_op", e1, e2);:}
	| Expr:e1 NE Expr:e2 {:RESULT = new BinaryOP("ne_op", e1, e2);:}
	| LPAR Expr:valore RPAR {:RESULT = valore;:}
	| MINUS Expr:valore {:RESULT = new UnaryOP("UMINUS", valore); :} %prec UMINUS
	| NOT Expr:valore {:RESULT = new UnaryOP("NOT", valore); :} ;

